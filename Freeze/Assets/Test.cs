using System.Collections.Generic;
using UnityEngine;
namespace QPathFinder
{
    public class Test : MonoBehaviour
    {
        public QPathFinder.PathFinder p;

        // Start is called before the first frame update
        void Start()
        {
            script = p;
            for (int i = 0; i < 3; i++)
            {
                Node temp = AddNode(new Vector3(i,i,i));
            }
        }

        // Update is called once per frame
        void Update()
        {

        }

        #region PRIVATE

        private PathFinder script;

        private int selectedNodeForConnectNodesMode = -1;

        #endregion

        #region Node and Path methods

        Node AddNode(Vector3 position, int addIndex = -1)
        {
            Node nodeAdded = new Node(position);
            if (addIndex == -1)
                script.graphData.nodes.Add(nodeAdded);
            else
                script.graphData.nodes.Insert(addIndex, nodeAdded);

            script.graphData.ReGenerateIDs();

            QPathFinder.Logger.LogInfo("Node with ID:" + nodeAdded.autoGeneratedID + " Added!");
            return nodeAdded;
        }

        void DeleteNode(int removeIndex = -1)
        {
            List<Node> nodeList = script.graphData.nodes;
            if (nodeList == null || nodeList.Count == 0)
                return;

            if (removeIndex == -1)
                removeIndex = nodeList.Count - 1;

            Node nodeRemoved = nodeList[removeIndex];
            nodeList.RemoveAt(removeIndex);
            script.graphData.ReGenerateIDs();

            QPathFinder.Logger.LogInfo("Node with ID:" + nodeRemoved.autoGeneratedID + " Removed!");
        }

        void ClearNodes()
        {
            script.graphData.nodes.Clear();
            QPathFinder.Logger.LogWarning("All Nodes are cleared!");
        }

        void AddPath(int addIndex = -1, int from = -1, int to = -1)
        {
            if (from != -1 && to != -1)
            {
                if (from == to)
                {
                    QPathFinder.Logger.LogError("Preventing from adding Path to the same node.");
                    return;
                }
                Path pd = script.graphData.GetPathBetween(from, to);
                if (pd != null)
                {
                    QPathFinder.Logger.LogError("We already have a path between these nodes. New Path not added!");
                    return;
                }
            }
            Path newPath = new Path(from, to);
            if (addIndex == -1)
                script.graphData.paths.Add(newPath);
            else
                script.graphData.paths.Insert(addIndex, newPath);
            script.graphData.ReGenerateIDs();

            QPathFinder.Logger.LogInfo("Path with ID:" + newPath.autoGeneratedID + " Added");
        }

        void DeletePath(int removeIndex = -1)
        {
            List<Path> pathList = script.graphData.paths;
            if (pathList == null || pathList.Count == 0)
                return;

            if (removeIndex == -1)
                removeIndex = pathList.Count - 1;

            Path removedPath = pathList[removeIndex];
            pathList.RemoveAt(removeIndex);
            script.graphData.ReGenerateIDs();

            QPathFinder.Logger.LogInfo("Path with ID:" + removedPath.autoGeneratedID + " Removed");
        }

        void ClearPaths()
        {
            script.graphData.paths.Clear();
            QPathFinder.Logger.LogWarning("All Paths are cleared!");
        }

        void TryAddPath(Vector3 position)
        {
            Node selectedNode = script.graphData.GetNode(script.FindNearestNode(position));
            if (selectedNode == null)
            {
                QPathFinder.Logger.LogError("Could not find any nearest Node to connect to!");
                return;
            }
            if (selectedNodeForConnectNodesMode != -1)
            {
                AddPath(-1, selectedNodeForConnectNodesMode, selectedNode.autoGeneratedID);
                QPathFinder.Logger.LogInfo("Connected " + selectedNodeForConnectNodesMode.ToString() + " and " + selectedNode.autoGeneratedID);
                selectedNodeForConnectNodesMode = -1;
            }
            else
            {
                selectedNodeForConnectNodesMode = selectedNode.autoGeneratedID;
                QPathFinder.Logger.LogInfo("Selected : " + selectedNodeForConnectNodesMode.ToString() + ". Now click another node to join these two");
            }
        }

        #endregion
    }
}
